apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.deployment.namespace }}
  # Note that the Pod does not need to be in the same namespace as the loader.
  labels:
    app: {{ .Values.deployment.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  template:
    metadata: 
      labels:
        app: {{ .Values.deployment.name }} 
    spec:
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - {{ .Values.deployment.name }}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
              
      containers:
        - name: {{ .Values.container.name }}
          image: {{ .Values.container.image_name }}:{{ .Values.version }}
          {{ if .Values.container.resourcesEnabled }}
          resources: 
            limits: 
                memory: {{ .Values.container.resources.limits.memory }}
                cpu: {{ .Values.container.resources.limits.cpu }}
            requests:
                memory: {{ .Values.container.resources.requests.memory }}
                cpu: {{ .Values.container.resources.requests.cpu }}
          {{ end }}
          {{ if .Values.container.lifecycleEnabled }}
          lifecycle:
            postStart:
              exec:
                command: [{{.Values.container.lifecycle.first}}, {{.Values.container.lifecycle.parameter}}, {{.Values.container.lifecycle.command}}]
          {{ end }}

          {{ if .Values.container.commandEnabled }}
          command: [{{ .Values.container.command.sh }}, {{ .Values.container.command.arg }}]
          args: [{{ .Values.container.args }}]
          {{ end }}   

          imagePullPolicy: {{ .Values.container.image_pullPolicy }}
          ports:
            - containerPort: {{ .Values.container.port }}
          {{ if .Values.container.liveness_and_rediness_probe }}
          livenessProbe:
            httpGet:
              path: {{ .Values.container.probe.path }}
              port: {{ .Values.container.probe.port }}
            initialDelaySeconds: {{ .Values.container.probe.liveness.DelaySeconds }}
            timeoutSeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: {{ .Values.container.probe.path }}
              port: {{ .Values.container.probe.port }}
            initialDelaySeconds: {{ .Values.container.probe.readiness.DelaySeconds }}
            timeoutSeconds: 10
            periodSeconds: 10
          {{ end }}

  
          volumeMounts:
          {{ if .Values.pv1Enabled }}  
          - name: {{ .Values.pv1.name }}
            mountPath: {{ .Values.pv1.mountPath }}
            subPath: {{ .Values.pv1.subPath }}
          {{ end }}

          {{ if .Values.pv2Enabled }}    
          - name: {{ .Values.pv2.name }}
            mountPath: {{ .Values.pv2.mountPath }}
            subPath: {{ .Values.pv2.subPath }}
          {{ end }}

          {{ if .Values.pv3Enabled }}    
          - name: {{ .Values.pv3.name }}
            mountPath: {{ .Values.pv3.mountPath }}
            subPath: {{ .Values.pv3.subPath }}
          {{ end }}

          {{ if .Values.pv4Enabled }}    
          - name: {{ .Values.pv4.name }}
            mountPath: {{ .Values.pv4.mountPath }}
            subPath: {{ .Values.pv4.subPath }}
          {{ end }}

      {{ if .Values.pvcEnabled }}
      volumes:
      - name: {{ .Values.pvc.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.pvc.persistentVolumeClaim.claimName }}
      {{ end }}

      {{ if .Values.tolerationsEnabled }}
      tolerations:
      - effect: {{ .Values.tolerations.effect }}
        operator: {{ .Values.tolerations.operator }}
        key: {{ .Values.tolerations.key }}
        value: {{ .Values.tolerations.value }}
      {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  namespace: {{ .Values.deployment.namespace }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ .Values.deployment.name }}
  ports:
  - protocol: {{ .Values.service.protocol }}
    port: {{ .Values.service.port }}
    name: {{ .Values.service.port_name }}
    targetPort: {{ .Values.service.target_port }}
---
{{ if .Values.autoscaling_Enabled }}
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{ .Values.deployment.namespace }}
  name: {{ .Values.autoscaling.hpa_name }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.deployment.name }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
  {{ if .Values.autoscaling.autoscaling_mem_Enabled }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.autoscaling_mem.AverageUtilization }}
  {{ end }}
  {{ if .Values.autoscaling.autoscaling_cpu_Enabled }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.autoscaling_cpu.AverageUtilization }}
  {{ end }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
{{ end }}
